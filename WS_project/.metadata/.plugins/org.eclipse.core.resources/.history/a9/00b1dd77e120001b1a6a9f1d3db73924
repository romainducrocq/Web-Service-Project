package employeedb;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;

import shared.IEmployee;
import shared.IEmployeeDB;
import shared.IVehicle;

/**
 * Implementation of the employee database.
 * @author Natacha
 *
 */
public class EmployeeDB extends UnicastRemoteObject implements IEmployeeDB {

	/**
	 * Serial version UUID
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Hashmap containing the employees indexed by their identifier.
	 */
	HashMap<String, IEmployee> employeeDB;
	
	/**
	 * Default constructor.
	 * Creates some employees and adds them to the hashmap.
	 * @throws RemoteException may occur as this object will be used in remote method call.
	 */
	public EmployeeDB() throws RemoteException {
		this.employeeDB = new HashMap<String, IEmployee>();
		
		Employee nat = new Employee("Natacha");
		Employee romain = new Employee("Romain");
		Employee alex = new Employee("Alexandre");
		
		employeeDB.put("Natacha", nat);
		employeeDB.put("Romain", romain);
		employeeDB.put("Alexandre", alex);
		
	}

	@Override
	public boolean isEmployee(String name) throws RemoteException {
		return (employeeDB.get(name) != null);
	}
	
	@Override
	/**
	 * Checks if an employee with this identifier and a password is part of the company.
	 * @param id the identifier to check
	 * @param pwd the password to check
	 * @return true if there exists an employee with this identifier and this password in the employee database.
	 * @throws RemoteException may occur as this object will be used in remote method call.
	 */
	public boolean isEmployee(String userName, String pwd) throws RemoteException {
		IEmployee empl = employeeDB.get(userName);
		
		if  (empl != null) {
			return empl.isPasswordRight(pwd);
		}
		else return false;
	}

	@Override
	public boolean employeeAuthentication(String name, String pwd) throws RemoteException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public IEmployee getEmployee(String name) throws RemoteException {
		return employeeDB.get(name);
	}
	


}