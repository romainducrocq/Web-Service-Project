package employeedb;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

import shared.IEmployee;

/**
 * 
 * @author natacha
 *
 */
public class Employee extends UnicastRemoteObject implements IEmployee {
		
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * The identifier (unique) of the employee
	 */
	String identifier;
	
	/**
	 * The password of the employee
	 */
	String password;
	
	/**
	 * The mail of the employee
	 */
	String email;
	
	/**
	 * Empty constructor
	 * @throws RemoteException
	 */
	public Employee() throws RemoteException {
		super();
	}

	/**
	 * Creates an employee given its identifier (default password, default mail).
	 * @param id the unique identifier of the employee
	 * @throws RemoteException may occur as this object will be used in remote method call.
	 */
	public Employee(String id) throws RemoteException {
		this.identifier = id;
		this.password = "0000";
		this.email = "ngrumbach@gmail.com";
	}
	
	@Override
	public String getIdentifier() throws RemoteException {
		return this.identifier;
	}

	@Override
	public void setIdentifier(String id) throws RemoteException {
		this.identifier = id;
	}

	@Override
	public void setPassword(String pwd) throws RemoteException {
		this.password = pwd;
	}

	@Override
	public boolean isPasswordRight(String pwd) throws RemoteException {
		return pwd.equals(this.password);
	}

	@Override
	public void notifyEmployee(String subject, String msg) throws RemoteException {
		System.out.println(subject);
		System.out.println(msg);
		
		
		// TODO send an email
/*		
		final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
		// Get a Properties object
		Properties props = System.getProperties();
		props.setProperty("mail.smtp.host", "smtp.gmail.com");
		props.setProperty("mail.smtp.socketFactory.class", SSL_FACTORY);
		props.setProperty("mail.smtp.socketFactory.fallback", "false");
		props.setProperty("mail.smtp.port", "465");
		props.setProperty("mail.smtp.socketFactory.port", "465");
		props.put("mail.smtp.auth", "true");
		props.put("mail.debug", "true");
		props.put("mail.store.protocol", "pop3");
		props.put("mail.transport.protocol", "smtp");
		
		final String username = "ifscars2020";//
		final String password = "ifscars?2";
		try{
				Session session = Session.getDefaultInstance(props, 
							new Authenticator(){
								protected PasswordAuthentication getPasswordAuthentication() {
									return new PasswordAuthentication(username, password);
							}});
				// -- Create a new message --
				Message message = new MimeMessage(session);
				// -- Set the FROM and TO fields --
				message.setFrom(new InternetAddress(username+"@gmail.com"));
				message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email,false));
				message.setSubject(subject);
				message.setText(msg);
				message.setSentDate(new Date());

				
				Transport.send(message);
				System.out.println("Message sent.");
		}
		catch (MessagingException e) {
			System.out.println("Mailing failed :( " + e);
		}
*/
	}
}